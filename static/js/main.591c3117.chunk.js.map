{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","qw","setqw","pos","setPos","neg","setNeg","iPlay","img","setImg","useEffect","audio","Audio","localeCompare","setInterval","play","clearInterval","localStorage","getItem","parseInt","setItem","className","onClick","prevPos","src","prevNeg","prevImg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LA4FeA,MAzFf,WAAgB,IAAD,EACOC,mBAAS,MADhB,mBACNC,EADM,KACFC,EADE,OAGSF,mBAAS,GAHlB,mBAGNG,EAHM,KAGDC,EAHC,OAISJ,mBAAS,GAJlB,mBAINK,EAJM,KAIDC,EAJC,KAMPC,EAAQ,WAND,EASSP,mBAASO,GATlB,mBASNC,EATM,KASDC,EATC,KAqEb,OA1DAC,qBAAU,WACR,IAAIC,EAAQ,IAAIC,MAAM,YAClBJ,EAAIK,cAAcN,GACpBL,EAAMY,aAAY,WAChBH,EAAMI,SACL,OAGHC,cAAcf,KAEhB,CAACO,IAEHE,qBAAU,WACLO,aAAaC,QAAQ,QACtBd,EAAOe,SAASF,aAAaC,QAAQ,SAEnCD,aAAaC,QAAQ,QACvBZ,EAAOa,SAASF,aAAaC,QAAQ,WAEtC,IAEHR,qBAAU,WACRO,aAAaG,QAAQ,MAAOD,SAAShB,IACrCc,aAAaG,QAAQ,MAAOD,SAASd,MACpC,CAACF,EAAKE,IAmCP,sBAAKgB,UAAU,MAAf,UACE,sBAAKA,UAAU,MAAMC,QAvBN,WACjBlB,GAAO,SAACmB,GAAD,OAAWA,EAAQ,MAsBxB,UACE,qBAAKD,QARC,WACVlB,GAAQ,GACRE,EAAO,IAMkBe,UAAU,QAA/B,mBACA,qBAAKA,UAAU,OAAf,SAAuBlB,IACvB,qBAAKkB,UAAU,MAAf,SAAsBF,SAAgB,IAANhB,GAAgBA,EAAME,IAAQ,MAC9D,qBAAKmB,IAAI,aAAaH,UAAU,UAAUC,QAvB7B,WACjBlB,GAAO,SAACmB,GAAD,OAAaA,EAAU,WAwB5B,sBAAKF,UAAU,MAAMC,QAjBN,WACjBhB,GAAO,SAACmB,GAAD,OAAaA,EAAU,MAgB5B,UACE,qBAAKJ,UAAU,OAAf,SAAuBhB,IACvB,qBAAKmB,IAAI,YAAYH,UAAU,UAAUC,QAvB5B,WACjBhB,GAAO,SAACmB,GAAD,OAAaA,EAAU,WAwB5B,qBAAKJ,UAAU,KAAf,SACE,qBAAKG,IAAKhB,EAAKa,UAAU,MAAMC,QA7CxB,WACXb,GAAO,SAACiB,GACN,OAAKA,EAAQb,cAAcN,GAIlBA,EApCE,wBCEFoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.591c3117.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport './App.css';\n\nfunction App() {\n  const [qw, setqw] = useState(null)\n\n  const [pos, setPos] = useState(0)\n  const [neg, setNeg] = useState(0)\n\n  const iPlay = \"play.png\";\n  const iPause = \"pause.jpg\";\n\n  const [img, setImg] = useState(iPlay)\n\n  useEffect(() => {\n    let audio = new Audio(\"beep.mp3\");\n    if (img.localeCompare(iPlay)) {\n      setqw(setInterval(() => {\n        audio.play();\n      }, 45000))\n    }\n    else {\n      clearInterval(qw);\n    }\n  },[img])\n\n  useEffect(() => {\n    if(localStorage.getItem('pos')){\n      setPos(parseInt(localStorage.getItem('pos')))\n    }\n    if (localStorage.getItem('neg')) {\n      setNeg(parseInt(localStorage.getItem('neg')))\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem('pos', parseInt(pos));\n    localStorage.setItem('neg', parseInt(neg));\n  }, [pos, neg])\n\n  let toggle = ()=>{\n    setImg((prevImg)=>{\n      if (!prevImg.localeCompare(iPlay)){\n        return iPause;\n      }\n      else{\n        return iPlay;\n      }\n    })\n  }\n  \n  let incrementPos = ()=>{\n    setPos((prevPos)=>prevPos+1);\n  }\n\n  let decrementPos = () => {\n    setPos((prevPos) => prevPos - 2);\n  }\n\n  let incrementNeg = () => {\n    setNeg((prevNeg) => prevNeg + 4);\n  }\n\n  let decrementNeg = () => {\n    setNeg((prevNeg) => prevNeg - 2);\n  }\n\n  let reset = () => {\n    setPos(-1);\n    setNeg(0);\n  }\n  \n  return (\n    <div className=\"App\">\n      <div className=\"pos\" onClick={incrementPos}>\n        <div onClick={reset} className='reset'>Reset</div>\n        <div className=\"npos\">{pos}</div>\n        <div className=\"per\">{parseInt((pos * 10000) / (pos - neg)) / 100}</div>\n        <img src=\"black.jpeg\" className=\"antipos\" onClick={decrementPos} />\n      </div>\n      <div className=\"neg\" onClick={decrementNeg}>\n        <div className=\"nval\">{neg}</div>\n        <img src=\"white.jpg\" className=\"antineg\" onClick={incrementNeg} />\n      </div>\n      <div className=\"pp\">\n        <img src={img} className=\"img\" onClick={toggle} />\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}